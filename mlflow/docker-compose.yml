services:
  mlflow:
    container_name: mlflow
    build: .
    ports:
      - "${MLFLOW_PORT}:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000/
      - MLFLOW_S3_IGNORE_TLS=true
    command: mlflow server --host 0.0.0.0 --backend-store-uri postgresql://postgres:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB} --serve-artifacts --artifacts-destination s3://${MINIO_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      mc:
        condition: service_completed_successfully

  postgres:
    container_name: mlflow-postgres
    image: postgres:17
    user: postgres
    environment:
      POSTGRES_USER: postgres # required by mlflow
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    container_name: mlflow-minio
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_STORAGE_USE_HTTPS=false
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data
    volumes:
      - minio_data:/data

  mc:
    container_name: mlflow-minio-mc
    image: minio/mc:RELEASE.2024-10-08T09-37-26Z
    entrypoint: >
      bash -c " mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && if ! mc ls minio/${MINIO_BUCKET_NAME}; then
        mc mb minio/${MINIO_BUCKET_NAME}
      else
        echo 'bucket ${MINIO_BUCKET_NAME} already exists'
      fi "
    depends_on:
      minio:
        condition: service_healthy

volumes:
  postgres_data:
  minio_data:
